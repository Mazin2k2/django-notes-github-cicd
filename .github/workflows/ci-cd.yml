name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "practice-app"
      DOCKER_REPO: "maizmazin"
      TAG: "${{ github.run_id }}"
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: "ubuntu"
      EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_OWNER: ${{ github.repository_owner }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_REPO/$IMAGE_NAME:$TAG .
          echo "Image built and tagged as $DOCKER_REPO/$IMAGE_NAME:$TAG"

      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPO/$IMAGE_NAME:$TAG
          echo "Image pushed to Docker Hub as $DOCKER_REPO/$IMAGE_NAME:$TAG"

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Upload and execute deploy script on EC2
      - name: Upload and run deployment script on EC2
        env:
          IMAGE_REPO: ${{ env.DOCKER_REPO }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.TAG }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: "ubuntu"
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Save EC2 private key to a file
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Create the deploy.sh script dynamically using variables
          cat > deploy.sh << EOF
#!/bin/bash

# Export environment variables for Docker Compose
export DOCKER_REPO="${{ env.DOCKER_REPO }}"
export IMAGE_NAME="${{ env.IMAGE_NAME }}"
export IMAGE_TAG="${{ env.TAG }}"
export GITHUB_OWNER="${{ env.GITHUB_OWNER }}"
export GITHUB_REPOSITORY="${{ env.GITHUB_REPOSITORY }}"

# Define project directory
PROJECT_DIR="/home/ubuntu/django-notes-github-cicd"

# Check if the directory exists
if [ ! -d "\$PROJECT_DIR" ]; then
  echo "Directory \$PROJECT_DIR does not exist! Cloning the repository..."
  # Clone the repository if the directory does not exist
  git clone https://github.com/\$GITHUB_OWNER/\$GITHUB_REPOSITORY.git \$PROJECT_DIR
else
  echo "Directory \$PROJECT_DIR exists. Pulling latest changes..."
  # Navigate to the project directory and pull the latest changes
  cd \$PROJECT_DIR
  git pull origin main
fi

# Ensure docker-compose.yml is present
if [ ! -f "\$PROJECT_DIR/docker-compose.yml" ]; then
  echo "docker-compose.yml not found in the project directory!"
  exit 1
fi

# Pull the latest image from Docker Hub using Docker Compose
docker-compose pull

# Restart the application using Docker Compose
docker-compose down
docker-compose up -d
EOF

          # Upload the deploy.sh script to the EC2 instance
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh $EC2_USER@$EC2_HOST:/home/ubuntu/deploy.sh

          # SSH into EC2 and execute the deploy.sh script
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "bash /home/ubuntu/deploy.sh"

          # Clean up the private key file **after** SSH commands have executed
          rm private_key.pem

          # Clean up the deploy.sh script on the EC2 instance after execution
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "rm /home/ubuntu/deploy.sh"
