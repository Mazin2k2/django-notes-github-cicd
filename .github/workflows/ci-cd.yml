name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger workflow when code is pushed to the main branch
  pull_request:
    branches:
      - main  # Trigger workflow when a pull request is opened/updated on the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "practice-app"
      DOCKER_REPO: "maizmazin"
      TAG: "${{ github.run_id }}"
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH private key for EC2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_REPO/$IMAGE_NAME:$TAG .
          echo "Image built and tagged as $DOCKER_REPO/$IMAGE_NAME:$TAG"

      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPO/$IMAGE_NAME:$TAG
          echo "Image pushed to Docker Hub as $DOCKER_REPO/$IMAGE_NAME:$TAG"

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Debugging: Check Docker Image Variables
      - name: Debug Docker Image Variables
        run: |
          echo "Image: $IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG"

      # Deploy to EC2 using SSH
      - name: Deploy to EC2
        env:
          IMAGE_REPO: ${{ env.DOCKER_REPO }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.TAG }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Save EC2 private key to a file
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and pull the new Docker image and deploy
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null
            then
              sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose --version
            fi

            # Pull the latest Docker image from Docker Hub
            docker pull $IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG

            # Navigate to the directory with the Docker Compose file
            cd /home/ubuntu/my-app  # Update this with the actual path

            # Restart the application using Docker Compose
            docker-compose down
            docker-compose up -d
          EOF

          # Clean up the private key file
          rm private_key.pem
